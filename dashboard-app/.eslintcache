[{"C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\index.js":"1","C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\App.js":"2","C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\pages\\DashboardPage.js":"3","C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\components\\Dashboard.js":"4","C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\components\\ChartRenderer.js":"5","C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\components\\Header.js":"6","C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\components\\DashboardItem.js":"7"},{"size":399,"mtime":1610019133822,"results":"8","hashOfConfig":"9"},{"size":908,"mtime":1610019133822,"results":"10","hashOfConfig":"9"},{"size":929,"mtime":1610019133822,"results":"11","hashOfConfig":"9"},{"size":263,"mtime":1610019133822,"results":"12","hashOfConfig":"9"},{"size":4397,"mtime":1610019133822,"results":"13","hashOfConfig":"9"},{"size":662,"mtime":1610019133822,"results":"14","hashOfConfig":"9"},{"size":441,"mtime":1610019133822,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"lbklyn",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\index.js",[],["32","33"],"C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\App.js",[],"C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\pages\\DashboardPage.js",[],"C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\components\\Dashboard.js",[],"C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\components\\ChartRenderer.js",["34","35","36","37","38"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useCubeQuery } from '@cubejs-client/react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { CartesianGrid, PieChart, Pie, Cell, AreaChart, Area, XAxis, YAxis, Tooltip, ResponsiveContainer, Legend, BarChart, Bar, LineChart, Line } from 'recharts';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst CartesianChart = ({\n  resultSet,\n  children,\n  ChartComponent\n}) => <ResponsiveContainer width=\"100%\" height={350}>\n    <ChartComponent data={resultSet.chartPivot()}>\n      <XAxis dataKey=\"x\" />\n      <YAxis />\n      <CartesianGrid />\n      {children}\n      <Legend />\n      <Tooltip />\n    </ChartComponent>\n  </ResponsiveContainer>;\n\nconst colors = ['#FF6492', '#141446', '#7A77FF'];\n\nconst stackedChartData = resultSet => {\n  const data = resultSet.pivot().map(({\n    xValues,\n    yValuesArray\n  }) => yValuesArray.map(([yValues, m]) => ({\n    x: resultSet.axisValuesString(xValues, ', '),\n    color: resultSet.axisValuesString(yValues, ', '),\n    measure: m && Number.parseFloat(m)\n  }))).reduce((a, b) => a.concat(b), []);\n  return data;\n};\n\nconst TypeToChartComponent = {\n  line: ({\n    resultSet\n  }) => {\n    return <CartesianChart resultSet={resultSet} ChartComponent={LineChart}>\n        {resultSet.seriesNames().map((series, i) => <Line key={series.key} stackId=\"a\" dataKey={series.key} name={series.title} stroke={colors[i]} />)}\n      </CartesianChart>;\n  },\n  bar: ({\n    resultSet\n  }) => {\n    return <CartesianChart resultSet={resultSet} ChartComponent={BarChart}>\n        {resultSet.seriesNames().map((series, i) => <Bar key={series.key} stackId=\"a\" dataKey={series.key} name={series.title} fill={colors[i]} />)}\n      </CartesianChart>;\n  },\n  area: ({\n    resultSet\n  }) => {\n    return <CartesianChart resultSet={resultSet} ChartComponent={AreaChart}>\n        {resultSet.seriesNames().map((series, i) => <Area key={series.key} stackId=\"a\" dataKey={series.key} name={series.title} stroke={colors[i]} fill={colors[i]} />)}\n      </CartesianChart>;\n  },\n  pie: ({\n    resultSet\n  }) => {\n    return <ResponsiveContainer width=\"100%\" height={350}>\n        <PieChart>\n          <Pie isAnimationActive={false} data={resultSet.chartPivot()} nameKey=\"x\" dataKey={resultSet.seriesNames()[0].key} fill=\"#8884d8\">\n            {resultSet.chartPivot().map((e, index) => <Cell key={index} fill={colors[index % colors.length]} />)}\n          </Pie>\n          <Legend />\n          <Tooltip />\n        </PieChart>\n      </ResponsiveContainer>;\n  },\n\n  number({\n    resultSet\n  }) {\n    return <Typography variant=\"h4\" style={{\n      textAlign: 'center'\n    }}>\n        {resultSet.seriesNames().map(s => resultSet.totalRow()[s.key])}\n      </Typography>;\n  },\n\n  table({\n    resultSet\n  }) {\n    return <Table aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            {resultSet.tableColumns().map(c => <TableCell key={c.key}>{c.title}</TableCell>)}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {resultSet.tablePivot().map((row, index) => <TableRow key={index}>\n              {resultSet.tableColumns().map(c => <TableCell key={c.key}>{row[c.key]}</TableCell>)}\n            </TableRow>)}\n        </TableBody>\n      </Table>;\n  }\n\n};\nconst TypeToMemoChartComponent = Object.keys(TypeToChartComponent).map(key => ({\n  [key]: React.memo(TypeToChartComponent[key])\n})).reduce((a, b) => ({ ...a,\n  ...b\n}));\n\nconst renderChart = Component => ({\n  resultSet,\n  error,\n  ...props\n}) => resultSet && <Component resultSet={resultSet} {...props} /> || error && error.toString() || <CircularProgress />;\n\nconst ChartRenderer = ({\n  vizState\n}) => {\n  const {\n    query,\n    chartType,\n    ...options\n  } = vizState;\n  const component = TypeToMemoChartComponent[chartType];\n  const renderProps = useCubeQuery(query);\n  return component && renderChart(component)({ ...options,\n    ...renderProps\n  });\n};\n\nChartRenderer.propTypes = {\n  vizState: PropTypes.object,\n  cubejsApi: PropTypes.object\n};\nChartRenderer.defaultProps = {\n  vizState: {},\n  cubejsApi: null\n};\nexport default ChartRenderer;","C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\components\\Header.js",[],"C:\\Users\\david.edwards\\Desktop\\cubejs-heroku-demo\\dashboard-app\\src\\components\\DashboardItem.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":30,"column":7,"nodeType":"45","messageId":"46","endLine":30,"endColumn":23},{"ruleId":"47","severity":1,"message":"48","line":116,"column":17,"nodeType":"49","messageId":"50","endLine":116,"endColumn":19},{"ruleId":"47","severity":1,"message":"48","line":116,"column":67,"nodeType":"49","messageId":"50","endLine":116,"endColumn":69},{"ruleId":"47","severity":1,"message":"51","line":116,"column":67,"nodeType":"49","messageId":"50","endLine":116,"endColumn":69},{"ruleId":"47","severity":1,"message":"51","line":116,"column":76,"nodeType":"49","messageId":"50","endLine":116,"endColumn":78},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'stackedChartData' is assigned a value but never used.","Identifier","unusedVar","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","no-global-assign","no-unsafe-negation"]